# presentation/view/main_window.py

from PySide6.QtWidgets import QMainWindow, QLabel
from PySide6.QtCore import Qt, QTimer, QDateTime
# Import the class generated by pyuic6 from your .ui file
# Make sure this import path is correct for your project structure
from presentation.views.UI import Ui_MainWindow


class MainWindow(QMainWindow, Ui_MainWindow):  # Inherit from the generated UI class

    def __init__(self, controller=None):
        # Call QMainWindow's __init__
        super().__init__()

        # 1. Load all UI components (creates self.Program_Value_Label, self.PN_Value_LineEdit, etc.)
        self.setupUi(self)

        # Initialize controller reference (can be None initially)
        self.controller = controller

        # 2. Setup internal custom widgets and styling (only run once)
        self._setup_status_bar()
        self.update_program_name_display("", 'black')  # Set initial state for Program Name Label
        self.update_test_status("Application Initialized. Ready to scan PN.", 'black')
        self.enable_start_button(False)

        # 3. Connect UI elements if the controller is already available
        if self.controller:
            self._connect_ui()

        # 4. Start internal timers/updates
        self._start_datetime_timer()

    def set_controller(self, controller):
        """Allows the controller to be injected after the view is initialized."""
        self.controller = controller
        self._connect_ui()

    def _setup_status_bar(self):
        """Creates and attaches the permanent status label to the QStatusBar."""
        # Use the QStatusBar defined in the .ui file
        self.statusbar = self.statusBar()
        self.status_label = QLabel()

        # Style and align
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignVCenter)

        # Add it to the QStatusBar (stretches to fill the space)
        self.statusbar.addWidget(self.status_label)

    def _connect_ui(self):
        """Connects UI widgets to controller slots."""
        if not self.controller:
            print("Warning: Attempted to connect UI before controller was set.")
            return

        # Connect PN line edit to controller logic
        self.PN_Value_LineEdit.textChanged.connect(self.controller.handle_pn_input)

        # Connect Start button to controller logic
        self.pushButton_Start_REDO_.clicked.connect(self.controller.start_test_trigger)

    def _start_datetime_timer(self):
        """Starts a timer to update the date/time label (QLabel_DateTime)."""
        self.datetime_timer = QTimer(self)
        self.datetime_timer.timeout.connect(self._update_datetime_label)
        self.datetime_timer.start(1000)  # Update every second
        self._update_datetime_label()  # Initial call

    def _update_datetime_label(self):
        """Updates the DateTime label with current time."""
        current_datetime = QDateTime.currentDateTime().toString("yyyy-MM-dd hh:mm:ss")
        # Ensure QLabel_DateTime exists from the .ui file
        if hasattr(self, 'QLabel_DateTime'):
            self.QLabel_DateTime.setText(current_datetime)

    # --- UI Update Methods ---

    def update_program_name_display(self, message: str, color: str):
        """Updates the large Program Name/PN Status label (QLabel_ProgramName)."""
        style = f"background-color: #333333; color: {color};"

        # *** CRITICAL FIX HERE ***
        # Access the correctly named QLabel from the UI file: QLabel_ProgramName
        self.QLabel_ProgramName.setText(message)

        self.QLabel_ProgramName.setStyleSheet(style)

    def update_test_status(self, message: str, color: str):
        """Updates the dynamic status bar with test progress."""
        style = f"color: {color}; font-weight: bold; padding: 2px;"
        self.status_label.setText(message)
        self.status_label.setStyleSheet(style)

    def enable_start_button(self, enabled: bool):
        """Enables or disables the Start button."""
        self.pushButton_Start_REDO_.setEnabled(enabled)

    def update_wh_result_label(self, message: str, color: str):
        """
        Updates the specific Wiring Harness test result label (Label_continuity_result)
        with the final result and color.
        """
        # 1. Define the style based on the color string passed from the Controller
        if color == 'green':
            background_color = "#388E3C"  # Dark Green
        elif color == 'red':
            background_color = "#D32F2F"  # Dark Red
        else:
            background_color = "#FFC107"  # Amber for unexpected/error

        # 2. Apply the style
        style = (
            f"background-color: {background_color}; "
            f"color: white; "
            f"font-weight: bold; "
            f"padding: 5px; "
            f"border-radius: 5px;"
        )

        # 3. Update the label text and style
        # CRITICAL: This line uses the QLabel object name 'Label_continuity_result'
        if hasattr(self, 'Label_continuity_result'):
            self.Label_continuity_result.setText(message)
            self.Label_continuity_result.setStyleSheet(style)
        else:
            # If the object name is wrong or the label wasn't loaded from the .ui file:
            print(f"UI Error: Label_continuity_result object not found. Message: {message}")